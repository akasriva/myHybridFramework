package testCases;



import org.testng.annotations.AfterMethod;

import org.testng.annotations.Test;

import org.testng.annotations.BeforeClass;

import org.testng.AssertJUnit;

import java.io.File;

import java.io.IOException;

import java.nio.file.Path;

import java.nio.file.Paths;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.LinkedHashMap;



import org.apache.commons.io.FileUtils;

import org.openqa.selenium.OutputType;

import org.openqa.selenium.TakesScreenshot;

import org.testng.Assert;

import org.testng.ITestResult;

import org.testng.annotations.AfterMethod;

import org.testng.annotations.BeforeClass;

import org.testng.annotations.BeforeTest;

import org.testng.annotations.Test;



import com.codoid.products.exception.FilloException;

import com.google.common.io.Files;

import com.relevantcodes.extentreports.ExtentReports;

import com.relevantcodes.extentreports.ExtentTest;

import com.relevantcodes.extentreports.LogStatus;



import components.Generics;

import generics.excelReusablesUI;

import generics.genericKeywords;

import generics.loginPage;

import io.restassured.response.Response;

import testSetup.eeRestAssured;

import testSetup.reportDirectory;

import testSetup.userExceptionMsg;



public class gwsRegressionSuit {



	static ExtentReports extent;

	static ExtentTest test;

	static String timestampOfCreatedDirectory,dateOfActionOnDeal,nameOfTestMethode,screenshotsPath;

	public static  int flag;

	public static File pathRequest=new File(System.getProperty("user.dir")+"/gws/request/"+Generics.getTimestamp());

	public static File pathResponse=new File(System.getProperty("user.dir")+"/gws/response/"+Generics.getTimestamp());

	public static String reqDirName=null;

	public static String resDirName=null;

	static final boolean runTestCase= true;

	static final boolean retriveBookmarks=true;

	static final boolean inlifeppUpsell=true;

	static final boolean euf=true;

	public static String requestFilepath="gws\\request";

	public static String responseFilepath="gws\\response";

	//static final boolean runTestCase1=true;

	@BeforeClass

	public static void beforeClass() {

		try {

			//Files.createParentDirs(pathRequest);

			//Files.createParentDirs(pathResponse);

			pathRequest.mkdir();

			pathResponse.mkdir();

			reqDirName=pathRequest.getName();

			resDirName=pathResponse.getName();

			System.out.println("Folder created");

		} catch (Exception e) {

			// TODO Auto-generated catch block

			System.out.println("File not created");

			e.printStackTrace();

		}

	}

	@BeforeTest

	public static void setup() throws IOException, InterruptedException, FilloException {

		//retriveBookmarks=generics.excelReusablesUI.readFlag("tc1_gwsGetEarlyUpgradeFeeValidateEuf");

		reportDirectory.timestamp=Generics.getTimestamp();  

		reportDirectory.report_consolidated=new ExtentReports(reportDirectory.commonFilepath2+"Consolidated Regression Report_"+reportDirectory.timestamp+".html");

		reportDirectory.report_consolidated.loadConfig(new File(System.getProperty("user.dir")+"/consolidated-extent-config.xml"));

	}



	@Test(enabled=runTestCase,priority=1,description="This testcase will hit getEarlyUpradeFee request and fetch the response")

	public static void tc1_gwsGetEarlyUpgradeFeeValidateEuf() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit getEarlyUpradeFee request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit getEarlyUpradeFee request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc1_gwsGetEarlyUpgradeFeeValidateEuf", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc1_gwsGetEarlyUpgradeFeeValidateEuf", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc1_gwsGetEarlyUpgradeFeeValidateEuf", "brand");

			String std=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc1_gwsGetEarlyUpgradeFeeValidateEuf", "sourceTransactionId");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc1_gwsGetEarlyUpgradeFeeValidateEuf", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=2,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc2_gwsGetEarlyUpgradeFeeValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc2_gwsGetEarlyUpgradeFeeValidateErrorForMissingMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc2_gwsGetEarlyUpgradeFeeValidateErrorForMissingMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc2_gwsGetEarlyUpgradeFeeValidateErrorForMissingMsisdn", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc2_gwsGetEarlyUpgradeFeeValidateErrorForMissingMsisdn", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc2_gwsGetEarlyUpgradeFeeValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc2_gwsGetEarlyUpgradeFeeValidateErrorForMissingMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=3,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc3_gwsGetEarlyUpgradeFeeValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc3_gwsGetEarlyUpgradeFeeValidateErrorForMissingChannel", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc3_gwsGetEarlyUpgradeFeeValidateErrorForMissingChannel", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc3_gwsGetEarlyUpgradeFeeValidateErrorForMissingChannel", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc3_gwsGetEarlyUpgradeFeeValidateErrorForMissingChannel", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc3_gwsGetEarlyUpgradeFeeValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc3_gwsGetEarlyUpgradeFeeValidateErrorForMissingChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=4,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc4_gwsGetEarlyUpgradeFeeValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc4_gwsGetEarlyUpgradeFeeValidateErrorForMissingBrand", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc4_gwsGetEarlyUpgradeFeeValidateErrorForMissingBrand", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc4_gwsGetEarlyUpgradeFeeValidateErrorForMissingBrand", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc4_gwsGetEarlyUpgradeFeeValidateErrorForMissingBrand", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc4_gwsGetEarlyUpgradeFeeValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc4_gwsGetEarlyUpgradeFeeValidateErrorForMissingBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	@Test(enabled=runTestCase,priority=5,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc5_gwsGetEarlyUpgradeFeeValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc5_gwsGetEarlyUpgradeFeeValidateErrorForMsisdnformat", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc5_gwsGetEarlyUpgradeFeeValidateErrorForMsisdnformat", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc5_gwsGetEarlyUpgradeFeeValidateErrorForMsisdnformat", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc5_gwsGetEarlyUpgradeFeeValidateErrorForMsisdnformat", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc5_gwsGetEarlyUpgradeFeeValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc5_gwsGetEarlyUpgradeFeeValidateErrorForMsisdnformat", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=6,description="This testcase will validate the error code 24 for invalid msisdn")

	public static void tc6_gwsGetEarlyUpgradeFeeValidateErrorForInvalidMsisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc6_gwsGetEarlyUpgradeFeeValidateErrorForInvalidMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc6_gwsGetEarlyUpgradeFeeValidateErrorForInvalidMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc6_gwsGetEarlyUpgradeFeeValidateErrorForInvalidMsisdn", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc6_gwsGetEarlyUpgradeFeeValidateErrorForInvalidMsisdn", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc6_gwsGetEarlyUpgradeFeeValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc6_gwsGetEarlyUpgradeFeeValidateErrorForInvalidMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=7,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc7_gwsGetEarlyUpgradeFeeValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc7_gwsGetEarlyUpgradeFeeValidateErrorForInvalidChannel", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc7_gwsGetEarlyUpgradeFeeValidateErrorForInvalidChannel", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc7_gwsGetEarlyUpgradeFeeValidateErrorForInvalidChannel", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc7_gwsGetEarlyUpgradeFeeValidateErrorForInvalidChannel", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc7_gwsGetEarlyUpgradeFeeValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc7_gwsGetEarlyUpgradeFeeValidateErrorForInvalidChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=8,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc8_gwsGetEarlyUpgradeFeeValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc8_gwsGetEarlyUpgradeFeeValidateErrorForInvalidBrand", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc8_gwsGetEarlyUpgradeFeeValidateErrorForInvalidBrand", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc8_gwsGetEarlyUpgradeFeeValidateErrorForInvalidBrand", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc8_gwsGetEarlyUpgradeFeeValidateErrorForInvalidBrand", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc8_gwsGetEarlyUpgradeFeeValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc8_gwsGetEarlyUpgradeFeeValidateErrorForInvalidBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=9,description="This testcase will validate the error code 102 for PayG customers")

	public static void tc9_gwsGetEarlyUpgradeFeeValidateErrorForPayGMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc9_gwsGetEarlyUpgradeFeeValidateErrorForPayGMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc9_gwsGetEarlyUpgradeFeeValidateErrorForPayGMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc9_gwsGetEarlyUpgradeFeeValidateErrorForPayGMsisdn", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc9_gwsGetEarlyUpgradeFeeValidateErrorForPayGMsisdn", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc9_gwsGetEarlyUpgradeFeeValidateErrorForPayGMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc9_gwsGetEarlyUpgradeFeeValidateErrorForPayGMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=10,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

	public static void tc10_gwsGetEarlyUpgradeFeeValidateErrorForHomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc10_gwsGetEarlyUpgradeFeeValidateErrorForHomeMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc10_gwsGetEarlyUpgradeFeeValidateErrorForHomeMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc10_gwsGetEarlyUpgradeFeeValidateErrorForHomeMsisdn", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc10_gwsGetEarlyUpgradeFeeValidateErrorForHomeMsisdn", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc10_gwsGetEarlyUpgradeFeeValidateErrorForHomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc10_gwsGetEarlyUpgradeFeeValidateErrorForHomeMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=11,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc11_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc11_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc11_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesBlank", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc11_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesBlank", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc11_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesBlank", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc11_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc11_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesBlank", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=12,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc12_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getEuf";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc12_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc12_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesInvalid", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc12_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesInvalid", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc12_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesInvalid", "sourceTransactionId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc12_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc12_gwsGetEarlyUpgradeFeeValidateErrorWhenAllParametesInvalid", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.eufRequest(msisdn,channel,brand,std);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/euf");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}

	//           GetRecommendation                    //         

	@Test(enabled=runTestCase,priority=13,description="This testcase will hit getRecommendation request and fetch the response")

	public static void tc13_gwsGetRecommendation() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit getRecommendation request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit getRecommendation request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc13_gwsGetRecommendation", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc13_gwsGetRecommendation", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc13_gwsGetRecommendation", "brand");

			String std=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc13_gwsGetRecommendation", "sourceTransactionId");

			String simo=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc13_gwsGetRecommendation", "simo");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc13_gwsGetRecommendation", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=14,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc14_gwsGetRecommendationValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc14_gwsGetRecommendationValidateErrorForMissingMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc14_gwsGetRecommendationValidateErrorForMissingMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc14_gwsGetRecommendationValidateErrorForMissingMsisdn", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc14_gwsGetRecommendationValidateErrorForMissingMsisdn", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc14_gwsGetRecommendationValidateErrorForMissingMsisdn", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc14_gwsGetRecommendationValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc14_gwsGetRecommendationValidateErrorForMissingMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=15,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc15_gwsGetRecommendationValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc15_gwsGetRecommendationValidateErrorForMissingChannel", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc15_gwsGetRecommendationValidateErrorForMissingChannel", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc15_gwsGetRecommendationValidateErrorForMissingChannel", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc15_gwsGetRecommendationValidateErrorForMissingChannel", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc15_gwsGetRecommendationValidateErrorForMissingChannel", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc15_gwsGetRecommendationValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc15_gwsGetRecommendationValidateErrorForMissingChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=16,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc16_gwsGetRecommendationValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc16_gwsGetRecommendationValidateErrorForMissingBrand", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc16_gwsGetRecommendationValidateErrorForMissingBrand", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc16_gwsGetRecommendationValidateErrorForMissingBrand", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc16_gwsGetRecommendationValidateErrorForMissingBrand", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc16_gwsGetRecommendationValidateErrorForMissingBrand", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc16_gwsGetRecommendationValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc16_gwsGetRecommendationValidateErrorForMissingBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}

	@Test(enabled=runTestCase,priority=17,description="This testcase will validate the error code 23 when sourceTransactionId is missing")

	public static void tc17_gwsGetRecommendationValidateErrorForMissingSourceTransactionId() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when sourceTransactionId is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when sourceTransactionId is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc17_gwsGetRecommendationValidateErrorForMissingSourceTransactionId", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc17_gwsGetRecommendationValidateErrorForMissingSourceTransactionId", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc17_gwsGetRecommendationValidateErrorForMissingSourceTransactionId", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc17_gwsGetRecommendationValidateErrorForMissingSourceTransactionId", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc17_gwsGetRecommendationValidateErrorForMissingSourceTransactionId", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc17_gwsGetRecommendationValidateErrorForMissingSourceTransactionId", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc17_gwsGetRecommendationValidateErrorForMissingSourceTransactionId", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=18,description="This testcase will validate the error code 23 when simo is missing")

	public static void tc18_gwsGetRecommendationValidateErrorForMissingSourceSimo() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when simo is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when simo is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc18_gwsGetRecommendationValidateErrorForMissingSourceSimo", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc18_gwsGetRecommendationValidateErrorForMissingSourceSimo", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc18_gwsGetRecommendationValidateErrorForMissingSourceSimo", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc18_gwsGetRecommendationValidateErrorForMissingSourceSimo", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc18_gwsGetRecommendationValidateErrorForMissingSourceSimo", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc18_gwsGetRecommendationValidateErrorForMissingSourceSimo", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc18_gwsGetRecommendationValidateErrorForMissingSourceSimo", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=19,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc19_gwsGetEarlyUpgradeFeeValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc19_gwsGetRecommendationValidateErrorForMsisdnformat", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc19_gwsGetRecommendationValidateErrorForMsisdnformat", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc19_gwsGetRecommendationValidateErrorForMsisdnformat", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc19_gwsGetRecommendationValidateErrorForMsisdnformat", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc19_gwsGetRecommendationValidateErrorForMsisdnformat", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc19_gwsGetRecommendationValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc19_gwsGetRecommendationValidateErrorForMsisdnformat", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=20,description="This testcase will validate the error code 24 for invalid msisdn")

	public static void tc20_gwsGetRecommendationValidateErrorForInvalidMsisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc20_gwsGetRecommendationValidateErrorForInvalidMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc20_gwsGetRecommendationValidateErrorForInvalidMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc20_gwsGetRecommendationValidateErrorForInvalidMsisdn", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc20_gwsGetRecommendationValidateErrorForInvalidMsisdn", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc20_gwsGetRecommendationValidateErrorForInvalidMsisdn", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc20_gwsGetRecommendationValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc20_gwsGetRecommendationValidateErrorForInvalidMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=21,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc21_gwsGetRecommendationValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc21_gwsGetRecommendationValidateErrorForInvalidChannel", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc21_gwsGetRecommendationValidateErrorForInvalidChannel", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc21_gwsGetRecommendationValidateErrorForInvalidChannel", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc21_gwsGetRecommendationValidateErrorForInvalidChannel", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc21_gwsGetRecommendationValidateErrorForInvalidChannel", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc21_gwsGetRecommendationValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc21_gwsGetRecommendationValidateErrorForInvalidChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=22,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc22_gwsGetRecommendationValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc22_gwsGetRecommendationValidateErrorForInvalidBrand", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc22_gwsGetRecommendationValidateErrorForInvalidBrand", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc22_gwsGetRecommendationValidateErrorForInvalidBrand", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc22_gwsGetRecommendationValidateErrorForInvalidBrand", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc22_gwsGetRecommendationValidateErrorForInvalidBrand", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc22_gwsGetRecommendationValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc22_gwsGetRecommendationValidateErrorForInvalidBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=23,description="This testcase will validate the error code 102 for PayG customers")

	public static void tc23_gwsGetRecommendationValidateErrorForPayGMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc23_gwsGetRecommendationValidateErrorForPayGMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc23_gwsGetRecommendationValidateErrorForPayGMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc23_gwsGetRecommendationValidateErrorForPayGMsisdn", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc23_gwsGetRecommendationValidateErrorForPayGMsisdn", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc23_gwsGetRecommendationValidateErrorForPayGMsisdn", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc23_gwsGetRecommendationValidateErrorForPayGMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc23_gwsGetRecommendationValidateErrorForPayGMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=24,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

	public static void tc24_gwsGetRecommendationValidateErrorForHomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc24_gwsGetRecommendationValidateErrorForHomeMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc24_gwsGetRecommendationValidateErrorForHomeMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc24_gwsGetRecommendationValidateErrorForHomeMsisdn", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc24_gwsGetRecommendationValidateErrorForHomeMsisdn", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc24_gwsGetRecommendationValidateErrorForHomeMsisdn", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc24_gwsGetRecommendationValidateErrorForHomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc24_gwsGetRecommendationValidateErrorForHomeMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=25,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc25_gwsGetRecommendationValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc25_gwsGetRecommendationValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc25_gwsGetRecommendationValidateErrorWhenAllParametesBlank", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc25_gwsGetRecommendationValidateErrorWhenAllParametesBlank", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc25_gwsGetRecommendationValidateErrorWhenAllParametesBlank", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc25_gwsGetRecommendationValidateErrorWhenAllParametesBlank", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc25_gwsGetRecommendationValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc25_gwsGetRecommendationValidateErrorWhenAllParametesBlank", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=26,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc26_gwsGetRecommendationValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc26_gwsGetRecommendationValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc26_gwsGetRecommendationValidateErrorWhenAllParametesInvalid", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc26_gwsGetRecommendationValidateErrorWhenAllParametesInvalid", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc26_gwsGetRecommendationValidateErrorWhenAllParametesInvalid", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc26_gwsGetRecommendationValidateErrorWhenAllParametesInvalid", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc26_gwsGetRecommendationValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc26_gwsGetRecommendationValidateErrorWhenAllParametesInvalid", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=27,description="This testcase will validate the error code 101 when no offer for customer")

	public static void tc27_gwsGetRecommendationValidateErrorWhenNoOffersForCustomer() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 101 when no offer for customer");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 101 when no offer for customer");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc27_gwsGetRecommendationValidateErrorWhenNoOffersForCustomer", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc27_gwsGetRecommendationValidateErrorWhenNoOffersForCustomer", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc27_gwsGetRecommendationValidateErrorWhenNoOffersForCustomer", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc27_gwsGetRecommendationValidateErrorWhenNoOffersForCustomer", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc27_gwsGetRecommendationValidateErrorWhenNoOffersForCustomer", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc27_gwsGetRecommendationValidateErrorWhenNoOffersForCustomer", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc27_gwsGetRecommendationValidateErrorWhenNoOffersForCustomer", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=28,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc28_gwsGetRecommendationValidateMissingSelectedAtricleId() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="getRecommendation";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc28_gwsGetRecommendationValidateMissingSelectedAtricleId", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc28_gwsGetRecommendationValidateMissingSelectedAtricleId", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc28_gwsGetRecommendationValidateMissingSelectedAtricleId", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc28_gwsGetRecommendationValidateMissingSelectedAtricleId", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc28_gwsGetRecommendationValidateMissingSelectedAtricleId", "simo");

			String selectedAtricleId=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc28_gwsGetRecommendationValidateMissingSelectedAtricleId", "selectedAtricleId");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc28_gwsGetRecommendationValidateMissingSelectedAtricleId", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc28_gwsGetRecommendationValidateMissingSelectedAtricleId", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest1(msisdn,channel,brand,std,simo,selectedAtricleId);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCodeResponse.equals(null)) && (errorMessageResponse.equals(null))) {

				System.out.println("Valid Response=");

				reportDirectory.test.log(LogStatus.PASS,"Valid Response=");

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Valid Response=");

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	//                   CaptureResponse                      //



	@Test(enabled=retriveBookmarks,priority=29,description="This testcase will hit captureResponse request and fetch the response")

	public static void tc29_gwsCaptureResponse() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit getEarlyUpradeFee request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit getEarlyUpradeFee request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc29_gwsCaptureResponse", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc29_gwsCaptureResponse", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc29_gwsCaptureResponse", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc29_gwsCaptureResponse", "outcomeDateTime");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=30,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc30_gwsCaptureResponseValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc30_gwsCaptureResponseValidateErrorForMissingMsisdn", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc30_gwsCaptureResponseValidateErrorForMissingMsisdn", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc30_gwsCaptureResponseValidateErrorForMissingMsisdn", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc30_gwsCaptureResponseValidateErrorForMissingMsisdn", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc30_gwsCaptureResponseValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc30_gwsCaptureResponseValidateErrorForMissingMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=31,description="This testcase will validate the error code 23 when id is missing")

	public static void tc31_gwsCaptureResponseValidateErrorForMissingId() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when id is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when id is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc31_gwsCaptureResponseValidateErrorForMissingId", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc31_gwsCaptureResponseValidateErrorForMissingId", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc31_gwsCaptureResponseValidateErrorForMissingId", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc31_gwsCaptureResponseValidateErrorForMissingId", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc31_gwsCaptureResponseValidateErrorForMissingId", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc31_gwsCaptureResponseValidateErrorForMissingId", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=32,description="This testcase will validate the error code 23 when outcome is missing")

	public static void tc32_gwsCaptureResponseValidateErrorForMissingOutcome() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when outcome is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when outcome is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc32_gwsCaptureResponseValidateErrorForMissingOutcome", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc32_gwsCaptureResponseValidateErrorForMissingOutcome", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc32_gwsCaptureResponseValidateErrorForMissingOutcome", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc32_gwsCaptureResponseValidateErrorForMissingOutcome", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc32_gwsCaptureResponseValidateErrorForMissingOutcome", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc32_gwsCaptureResponseValidateErrorForMissingOutcome", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=33,description="This testcase will validate the no error when outcome is missing")

	public static void tc33_gwsCaptureResponseValidateErrorForMissingoutcomeDateTime() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the no error when outcomeDateTime is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the no error when outcomeDateTime is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc33_gwsCaptureResponseValidateErrorForMissingoutcomeDateTime", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc33_gwsCaptureResponseValidateErrorForMissingoutcomeDateTime", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc33_gwsCaptureResponseValidateErrorForMissingoutcomeDateTime", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc33_gwsCaptureResponseValidateErrorForMissingoutcomeDateTime", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc33_gwsCaptureResponseValidateErrorForMissingoutcomeDateTime", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc33_gwsCaptureResponseValidateErrorForMissingoutcomeDateTime", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			/*          String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }*/

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=34,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc34_gwsCaptureResponseValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc34_gwsCaptureResponseValidateErrorForMsisdnformat", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc34_gwsCaptureResponseValidateErrorForMsisdnformat", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc34_gwsCaptureResponseValidateErrorForMsisdnformat", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc34_gwsCaptureResponseValidateErrorForMsisdnformat", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc34_gwsCaptureResponseValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc34_gwsCaptureResponseValidateErrorForMsisdnformat", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=35,description="This testcase will validate the error code 100 for invalid msisdn")

	public static void tc35_gwsCaptureResponseValidateErrorForInvalidMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc35_gwsCaptureResponseValidateErrorForInvalidMsisdn", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc35_gwsCaptureResponseValidateErrorForInvalidMsisdn", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc35_gwsCaptureResponseValidateErrorForInvalidMsisdn", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc35_gwsCaptureResponseValidateErrorForInvalidMsisdn", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc35_gwsCaptureResponseValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc35_gwsCaptureResponseValidateErrorForInvalidMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=36,description="This testcase will validate the no error for invalid id")

	public static void tc36_gwsCaptureResponseValidateErrorForInvalidId() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the no error for invalid id");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the no error for invalid id");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc36_gwsCaptureResponseValidateErrorForInvalidId", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc36_gwsCaptureResponseValidateErrorForInvalidId", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc36_gwsCaptureResponseValidateErrorForInvalidId", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc36_gwsCaptureResponseValidateErrorForInvalidId", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc36_gwsCaptureResponseValidateErrorForInvalidId", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc36_gwsCaptureResponseValidateErrorForInvalidId", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			/*String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }*/

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=37,description="This testcase will validate error code 24 for invalid outcome")

	public static void tc37_gwsCaptureResponseValidateErrorForInvalidOutcome() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate error code 24 for invalid outcome");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid outcome");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc37_gwsCaptureResponseValidateErrorForInvalidOutcome", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc37_gwsCaptureResponseValidateErrorForInvalidOutcome", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc37_gwsCaptureResponseValidateErrorForInvalidOutcome", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc37_gwsCaptureResponseValidateErrorForInvalidOutcome", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc37_gwsCaptureResponseValidateErrorForInvalidOutcome", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc37_gwsCaptureResponseValidateErrorForInvalidOutcome", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=38,description="This testcase will validate no error for Payg")

	public static void tc38_gwsCaptureResponseValidateErrorForPayGMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the no error for Payg");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the no error for Payg");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc38_gwsCaptureResponseValidateErrorForPayGMsisdn", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc38_gwsCaptureResponseValidateErrorForPayGMsisdn", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc38_gwsCaptureResponseValidateErrorForPayGMsisdn", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc38_gwsCaptureResponseValidateErrorForPayGMsisdn", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc38_gwsCaptureResponseValidateErrorForPayGMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc38_gwsCaptureResponseValidateErrorForPayGMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			/* genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



                                           //Parsing json to perform required validations//

                                           String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }*/

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=39,description="This testcase will validate no error for Home")

	public static void tc39_gwsCaptureResponseValidateErrorForHomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the no error for Home");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the no error for home");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc39_gwsCaptureResponseValidateErrorForHomeMsisdn", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc39_gwsCaptureResponseValidateErrorForHomeMsisdn", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc39_gwsCaptureResponseValidateErrorForHomeMsisdn", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc39_gwsCaptureResponseValidateErrorForHomeMsisdn", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc39_gwsCaptureResponseValidateErrorForHomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc39_gwsCaptureResponseValidateErrorForHomeMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			/* genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



                                           //Parsing json to perform required validations//

                                           String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }*/

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=25,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc40_gwsCaptureResponseValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc40_gwsCaptureResponseValidateErrorWhenAllParametesBlank", "msisdn");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc40_gwsCaptureResponseValidateErrorWhenAllParametesBlank", "id");

			String outcome=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc40_gwsCaptureResponseValidateErrorWhenAllParametesBlank", "outcome");

			String outcomeDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc40_gwsCaptureResponseValidateErrorWhenAllParametesBlank", "outcomeDateTime");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc40_gwsCaptureResponseValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc40_gwsCaptureResponseValidateErrorWhenAllParametesBlank", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.capturResponseRequest(msisdn,id,outcome,outcomeDateTime);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/-3751363009996167495/history");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=41,description="This testcase will validate the error code 100 when all parameters are invalid in request")

	public static void tc41_gwsCaptureResponseValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="captureResponse";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc41_gwsCaptureResponseValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc41_gwsCaptureResponseValidateErrorWhenAllParametesInvalid", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc41_gwsCaptureResponseValidateErrorWhenAllParametesInvalid", "brand");

			String std=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc41_gwsCaptureResponseValidateErrorWhenAllParametesInvalid", "sourceTransactionId");

			String simo=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc41_gwsCaptureResponseValidateErrorWhenAllParametesInvalid", "simo");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc41_gwsCaptureResponseValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc41_gwsCaptureResponseValidateErrorWhenAllParametesInvalid", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getRecommendationRequest(msisdn,channel,brand,std,simo);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgrade");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}

	//            GetAvgTopUp               //



	@Test(enabled=runTestCase,priority=42,description="This testcase will hit GetAvgTopUp request and fetch the response")

	public static void tc42_211_GetAvgTopUpValidateInteractionId() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit GetAvgTopUp request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit GetAvgTopUp request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc42_211_GetAvgTopUpValidateInteractionId", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc42_211_GetAvgTopUpValidateInteractionId", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc42_211_GetAvgTopUpValidateInteractionId", "brand");



			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc42_211_GetAvgTopUpValidateInteractionId", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=46,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc43_211_GetAvgTopUpValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc43_211_GetAvgTopUpValidateErrorForMissingMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc43_211_GetAvgTopUpValidateErrorForMissingMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc43_211_GetAvgTopUpValidateErrorForMissingMsisdn", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc43_211_GetAvgTopUpValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc43_211_GetAvgTopUpValidateErrorForMissingMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=44,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc44_211_GetAvgTopUpValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc44_211_GetAvgTopUpValidateErrorForMissingChannel", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc44_211_GetAvgTopUpValidateErrorForMissingChannel", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc44_211_GetAvgTopUpValidateErrorForMissingChannel", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc44_211_GetAvgTopUpValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc44_211_GetAvgTopUpValidateErrorForMissingChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=4,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc45_211_GetAvgTopUpValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc45_211_GetAvgTopUpValidateErrorForMissingBrand", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc45_211_GetAvgTopUpValidateErrorForMissingBrand", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc45_211_GetAvgTopUpValidateErrorForMissingBrand", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc45_211_GetAvgTopUpValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc45_211_GetAvgTopUpValidateErrorForMissingBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	@Test(enabled=runTestCase,priority=46,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc46_211_GetAvgTopUpValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc46_211_GetAvgTopUpValidateErrorForMsisdnformat", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc46_211_GetAvgTopUpValidateErrorForMsisdnformat", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc46_211_GetAvgTopUpValidateErrorForMsisdnformat", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc46_211_GetAvgTopUpValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc46_211_GetAvgTopUpValidateErrorForMsisdnformat", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=47,description="This testcase will validate the error code 24 for invalid msisdn")

	public static void tc47_211_GetAvgTopUpValidateErrorForInvalidMsisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc47_211_GetAvgTopUpValidateErrorForInvalidMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc47_211_GetAvgTopUpValidateErrorForInvalidMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc47_211_GetAvgTopUpValidateErrorForInvalidMsisdn", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc47_211_GetAvgTopUpValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc47_211_GetAvgTopUpValidateErrorForInvalidMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=48,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc48_211_GetAvgTopUpValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc48_211_GetAvgTopUpValidateErrorForInvalidChannel", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc48_211_GetAvgTopUpValidateErrorForInvalidChannel", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc48_211_GetAvgTopUpValidateErrorForInvalidChannel", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc48_211_GetAvgTopUpValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc48_211_GetAvgTopUpValidateErrorForInvalidChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=49,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc49_211_GetAvgTopUpValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc49_211_GetAvgTopUpValidateErrorForInvalidBrand", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc49_211_GetAvgTopUpValidateErrorForInvalidBrand", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc49_211_GetAvgTopUpValidateErrorForInvalidBrand", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc49_211_GetAvgTopUpValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc49_211_GetAvgTopUpValidateErrorForInvalidBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=50,description="This testcase will validate the error code 102 for PayG customers")

	public static void tc50_211_GetAvgTopUpValidateErrorForPayMMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 for PayM customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 for PayM customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc50_211_GetAvgTopUpValidateErrorForPayMMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc50_211_GetAvgTopUpValidateErrorForPayMMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc50_211_GetAvgTopUpValidateErrorForPayMMsisdn", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc50_211_GetAvgTopUpValidateErrorForPayMMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc50_211_GetAvgTopUpValidateErrorForPayMMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=51,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

	public static void tc51_211_GetAvgTopUpValidateErrorForHomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc51_211_GetAvgTopUpValidateErrorForHomeMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc51_211_GetAvgTopUpValidateErrorForHomeMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc51_211_GetAvgTopUpValidateErrorForHomeMsisdn", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc51_211_GetAvgTopUpValidateErrorForHomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc51_211_GetAvgTopUpValidateErrorForHomeMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=52,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc52_211_GetAvgTopUpValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc52_211_GetAvgTopUpValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc52_211_GetAvgTopUpValidateErrorWhenAllParametesBlank", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc52_211_GetAvgTopUpValidateErrorWhenAllParametesBlank", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc52_211_GetAvgTopUpValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc52_211_GetAvgTopUpValidateErrorWhenAllParametesBlank", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=53,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc53_211_GetAvgTopUpValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc53_211_GetAvgTopUpValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc53_211_GetAvgTopUpValidateErrorWhenAllParametesInvalid", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc53_211_GetAvgTopUpValidateErrorWhenAllParametesInvalid", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc53_211_GetAvgTopUpValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc53_211_GetAvgTopUpValidateErrorWhenAllParametesInvalid", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=54,description="This testcase will validate the error code 100 when no offers for customer")

	public static void tc54_211_GetAvgTopUpValidateErrorWhenAWhenNoOffersForCustomer() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 when no offers for custome");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 when no offers for custome");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetAvgTopUp";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc54_211_GetAvgTopUpValidateErrorWhenAWhenNoOffersForCustomer", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc54_211_GetAvgTopUpValidateErrorWhenAWhenNoOffersForCustomer", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc54_211_GetAvgTopUpValidateErrorWhenAWhenNoOffersForCustomer", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc54_211_GetAvgTopUpValidateErrorWhenAWhenNoOffersForCustomer", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc54_211_GetAvgTopUpValidateErrorWhenAWhenNoOffersForCustomer", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getAvgTopUpRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/avgtopup");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	//                GetDeviceList                     //



	@Test(enabled=runTestCase,priority=55,description="This testcase will hit GetDeviceList request and fetch the response")

	public static void tc55_211_GetDeviceListValidateInteractionId() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit GetDeviceList request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit GetDeviceList request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetDeviceList";

			//fetching the request data from excel//

			String requestId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc55_211_GetDeviceListValidateInteractionId", "requestId");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc55_211_GetDeviceListValidateInteractionId", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc55_211_GetDeviceListValidateInteractionId", "brand");



			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getDeviceList(requestId,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc55_211_GetDeviceListValidateInteractionId", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=56,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc56_211_GetDeviceListValidateErrorForMissingRequestId() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetDeviceList";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc56_211_GetDeviceListValidateErrorForMissingMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc56_211_GetDeviceListValidateErrorForMissingMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc56_211_GetDeviceListValidateErrorForMissingMsisdn", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc56_211_GetDeviceListValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc56_211_GetDeviceListValidateErrorForMissingMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=57,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc57_211_GetDeviceListValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetDeviceList";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc57_211_GetDeviceListValidateErrorForMissingChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc57_211_GetDeviceListValidateErrorForMissingChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc57_211_GetDeviceListValidateErrorForMissingChannel", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc57_211_GetDeviceListValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc57_211_GetDeviceListValidateErrorForMissingChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=58,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc58_211_GetDeviceListValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetDeviceList";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc58_211_GetDeviceListValidateErrorForMissingBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc58_211_GetDeviceListValidateErrorForMissingBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc58_211_GetDeviceListValidateErrorForMissingBrand", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc58_211_GetDeviceListValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc58_211_GetDeviceListValidateErrorForMissingBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	/*

              @Test(enabled=runTestCase,priority=59,description="This testcase will validate the error code 24 for msisdn format")

              public static void tc59_211_GetDeviceListValidateErrorForMsisdnformat() {



                             flag=0;

                             nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

              timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

                             String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

                             System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

                             System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

                             //String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

                             String fileName=nameOfTestMethode;

                             try {

                                           test=reportDirectory.report.startTest("");

                                           reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

                                           reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

                                           String excelName="gwsRestAssuredRequestParameters";

                                           String sheetName="GetDeviceList";

                                           //fetching the request data from excel//

                                           String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc59_211_GetDeviceListValidateErrorForMsisdnformat", "msisdn");

                                           String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc59_211_GetDeviceListValidateErrorForMsisdnformat", "channel");

                                           String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc59_211_GetDeviceListValidateErrorForMsisdnformat", "brand");

                                           String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc59_211_GetDeviceListValidateErrorForMsisdnformat", "ErrorCode");

                                           String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc59_211_GetDeviceListValidateErrorForMsisdnformat", "ErrorMessage");

                                           //Request parametes are formed using Map//

                                           HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

                                           //Converting request map into jason formate//

                                           String jason=eeRestAssured.convertMapToJson(requestMap);

                                           //save json request to json file

                             genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

                                           //fetch response//

                                           Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

                                           //Validate status code//

                                           int statusCode = rr.getStatusCode();

                                           System.out.println("statusCode="+statusCode);

                                           if(statusCode>200) {

                                                          System.out.println("statusCode validation Passed");

                                                          reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

                                           }else {

                                                          System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

                                                          reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

                                           }

                                           //copy Response generated to file//

                             genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



                                           //Parsing json to perform required validations//

                                           String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }

                                           flag++;

                                           reportDirectory.report.endTest(test);

                             reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



                             }catch (Exception e) {

                                           System.out.println("Catch block executed method");

                                           AssertJUnit.assertEquals(flag, 1);

                                           e.printStackTrace();

                             }

              }            



              @Test(enabled=runTestCase,priority=60,description="This testcase will validate the error code 100 for invalid msisdn")

              public static void tc60_211_GetDeviceListValidateErrorForInvalidMsisdn() {

                             flag=0;

                             nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

              timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

                             String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

                             System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

                             System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

                             //String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

                             String fileName=nameOfTestMethode;

                             try {

                                           test=reportDirectory.report.startTest("");

                                           reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

                                           reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

                                           String excelName="gwsRestAssuredRequestParameters";

                                           String sheetName="GetDeviceList";

                                           //fetching the request data from excel//

                                           String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc60_211_GetDeviceListValidateErrorForInvalidMsisdn", "msisdn");

                                           String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc60_211_GetDeviceListValidateErrorForInvalidMsisdn", "channel");

                                           String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc60_211_GetDeviceListValidateErrorForInvalidMsisdn", "brand");

                                           String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc60_211_GetDeviceListValidateErrorForInvalidMsisdn", "ErrorCode");

                                           String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc60_211_GetDeviceListValidateErrorForInvalidMsisdn", "ErrorMessage");

                                           //Request parametes are formed using Map//

                                           HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

                                           //Converting request map into jason formate//

                                           String jason=eeRestAssured.convertMapToJson(requestMap);

                                           //save json request to json file

                             genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

                                           //fetch response//

                                           Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

                                           //Validate status code//

                                           int statusCode = rr.getStatusCode();

                                           System.out.println("statusCode="+statusCode);

                                           if(statusCode>200) {

                                                          System.out.println("statusCode validation Passed");

                                                          reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

                                           }else {

                                                          System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

                                                          reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

                                           }

                                           //copy Response generated to file//

                             genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



                                           //Parsing json to perform required validations//

                                           String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }

                                           flag++;

                                           reportDirectory.report.endTest(test);

                             reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



                             }catch (Exception e) {

                                           System.out.println("Catch block executed method");

                                           AssertJUnit.assertEquals(flag, 1);

                                           e.printStackTrace();

                             }

              }

	 */

	@Test(enabled=runTestCase,priority=61,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc61_211_GetDeviceListValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetDeviceList";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc61_211_GetDeviceListValidateErrorForInvalidChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc61_211_GetDeviceListValidateErrorForInvalidChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc61_211_GetDeviceListValidateErrorForInvalidChannel", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc61_211_GetDeviceListValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc61_211_GetDeviceListValidateErrorForInvalidChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=62,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc62_211_GetDeviceListValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetDeviceList";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc62_211_GetDeviceListValidateErrorForInvalidBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc62_211_GetDeviceListValidateErrorForInvalidBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc62_211_GetDeviceListValidateErrorForInvalidBrand", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc62_211_GetDeviceListValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc62_211_GetDeviceListValidateErrorForInvalidBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}

	/*

              @Test(enabled=runTestCase,priority=63,description="This testcase will validate the error code 102 for PayG customers")

              public static void tc63_211_GetDeviceListValidateErrorForPayGMsisdn() {



                             flag=0;

                             nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

              timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

                             String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

                             System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

                             System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

                             //String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

                             String fileName=nameOfTestMethode;

                             try {

                                           test=reportDirectory.report.startTest("");

                                           reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

                                           reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

                                           String excelName="gwsRestAssuredRequestParameters";

                                           String sheetName="GetDeviceList";

                                           //fetching the request data from excel//

                                           String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc63_211_GetDeviceListValidateErrorForPayGMsisdn", "msisdn");

                                           String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc63_211_GetDeviceListValidateErrorForPayGMsisdn", "channel");

                                           String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc63_211_GetDeviceListValidateErrorForPayGMsisdn", "brand");

                                           String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc63_211_GetDeviceListValidateErrorForPayGMsisdn", "ErrorCode");

                                           String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc63_211_GetDeviceListValidateErrorForPayGMsisdn", "ErrorMessage");

                                           //Request parametes are formed using Map//

                                           HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

                                           //Converting request map into jason formate//

                                           String jason=eeRestAssured.convertMapToJson(requestMap);

                                           //save json request to json file

                             genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

                                           //fetch response//

                                           Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

                                           //Validate status code//

                                           int statusCode = rr.getStatusCode();

                                           System.out.println("statusCode="+statusCode);

                                           if(statusCode>200) {

                                                          System.out.println("statusCode validation Passed");

                                                          reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

                                           }else {

                                                          System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

                                                          reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

                                           }

                                           //copy Response generated to file//

                             genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



                                           //Parsing json to perform required validations//

                                           String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }

                                           flag++;

                                           reportDirectory.report.endTest(test);

                             reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



                             }catch (Exception e) {

                                           System.out.println("Catch block executed method");

                                           AssertJUnit.assertEquals(flag, 1);

                                           e.printStackTrace();

                             }

              }            



              @Test(enabled=runTestCase,priority=64,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

              public static void tc64_211_GetDeviceListValidateErrorForHomeMsisdn() {



                             flag=0;

                             nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

              timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

                             String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

                             System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

                             System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

                             //String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

                            String fileName=nameOfTestMethode;

                             try {

                                           test=reportDirectory.report.startTest("");

                                           reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

                                           reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

                                           String excelName="gwsRestAssuredRequestParameters";

                                           String sheetName="GetDeviceList";

                                           //fetching the request data from excel//

                                           String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc64_211_GetDeviceListValidateErrorForHomeMsisdn", "msisdn");

                                           String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc64_211_GetDeviceListValidateErrorForHomeMsisdn", "channel");

                                           String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc64_211_GetDeviceListValidateErrorForHomeMsisdn", "brand");

                                           String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc64_211_GetDeviceListValidateErrorForHomeMsisdn", "ErrorCode");

                                           String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc64_211_GetDeviceListValidateErrorForHomeMsisdn", "ErrorMessage");

                                           //Request parametes are formed using Map//

                                           HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

                                           //Converting request map into jason formate//

                                           String jason=eeRestAssured.convertMapToJson(requestMap);

                                           //save json request to json file

                             genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

                                           //fetch response//

                                           Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

                                           //Validate status code//

                                           int statusCode = rr.getStatusCode();

                                           System.out.println("statusCode="+statusCode);

                                           if(statusCode>200) {

                                                          System.out.println("statusCode validation Passed");

                                                          reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

                                           }else {

                                                          System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

                                                          reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Okt");

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

                                           }

                                           //copy Response generated to file//

                             genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



                                           //Parsing json to perform required validations//

                                           String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }

                                           flag++;

                                           reportDirectory.report.endTest(test);

                             reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



                             }catch (Exception e) {

                                           System.out.println("Catch block executed method");

                                           AssertJUnit.assertEquals(flag, 1);

                                           e.printStackTrace();

                             }

              }

	 */

	@Test(enabled=runTestCase,priority=65,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc65_211_GetDeviceListValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetDeviceList";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc65_211_GetDeviceListValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc65_211_GetDeviceListValidateErrorWhenAllParametesBlank", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc65_211_GetDeviceListValidateErrorWhenAllParametesBlank", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc65_211_GetDeviceListValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc65_211_GetDeviceListValidateErrorWhenAllParametesBlank", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=66,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc66_211_GetDeviceListValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetDeviceList";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc66_211_GetDeviceListValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc66_211_GetDeviceListValidateErrorWhenAllParametesInvalid", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc66_211_GetDeviceListValidateErrorWhenAllParametesInvalid", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc66_211_GetDeviceListValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc66_211_GetDeviceListValidateErrorWhenAllParametesInvalid", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            

	/*

              @Test(enabled=runTestCase,priority=67,description="This testcase will validate the error code 100 when no offers for customer")

              public static void tc67_211_GetDeviceListValidateErrorWhenNoOffersForCustomer() {



                             flag=0;

                             nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

              timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

                             String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

                             System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

                             System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

                             //String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

                             String fileName=nameOfTestMethode;

                             try {

                                           test=reportDirectory.report.startTest("");

                                           reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 when no offers for custome");

                                           reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 when no offers for custome");

                                           String excelName="gwsRestAssuredRequestParameters";

                                           String sheetName="GetDeviceList";

                                           //fetching the request data from excel//

                                           String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc67_211_GetDeviceListValidateErrorWhenNoOffersForCustomer", "msisdn");

                                           String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc67_211_GetDeviceListValidateErrorWhenNoOffersForCustomer", "channel");

                                           String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc67_211_GetDeviceListValidateErrorWhenNoOffersForCustomer", "brand");

                                           String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc67_211_GetDeviceListValidateErrorWhenNoOffersForCustomer", "ErrorCode");

                                           String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc67_211_GetDeviceListValidateErrorWhenNoOffersForCustomer", "ErrorMessage");

                                           //Request parametes are formed using Map//

                                           HashMap<String,String> requestMap=eeRestAssured.getDeviceList(msisdn,channel,brand);

                                           //Converting request map into jason formate//

                                           String jason=eeRestAssured.convertMapToJson(requestMap);

                                           //save json request to json file

                             genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

                                           //fetch response//

                                           Response rr=eeRestAssured.getRestResponse(requestMap,"/devicelist");

                                           //Validate status code//

                                           int statusCode = rr.getStatusCode();

                                           System.out.println("statusCode="+statusCode);

                                           if(statusCode>200) {

                                                          System.out.println("statusCode validation Passed");

                                                          reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

                                           }else {

                                                          System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

                                                          reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

                                           }

                                           //copy Response generated to file//

                             genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



                                           //Parsing json to perform required validations//

                                           String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }

                                           flag++;

                                           reportDirectory.report.endTest(test);

                             reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



                             }catch (Exception e) {

                                           System.out.println("Catch block executed method");

                                           AssertJUnit.assertEquals(flag, 1);

                                           e.printStackTrace();

                             }

              }

	 */

	//         GetUpgradeFee        //    

	@Test(enabled=runTestCase,priority=68,description="This testcase will hit GetDeviceList request and fetch the response")

	public static void tc68_211_GetUpgradeFeeValidateUf() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit GetUpgradeFee request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit GetUpgradeFee request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc68_211_GetUpgradeFeeValidateUf", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc68_211_GetUpgradeFeeValidateUf", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc68_211_GetUpgradeFeeValidateUf", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc68_211_GetUpgradeFeeValidateUf", "upgradeType");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc68_211_GetUpgradeFeeValidateUf", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=69,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc69_211_GetUpgradeFeeValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc69_211_GetUpgradeFeeValidateErrorForMissingMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc69_211_GetUpgradeFeeValidateErrorForMissingMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc69_211_GetUpgradeFeeValidateErrorForMissingMsisdn", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc69_211_GetUpgradeFeeValidateErrorForMissingMsisdn", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc69_211_GetUpgradeFeeValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc69_211_GetUpgradeFeeValidateErrorForMissingMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=70,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc70_211_GetUpgradeFeeValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc70_211_GetUpgradeFeeValidateErrorForMissingChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc70_211_GetUpgradeFeeValidateErrorForMissingChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc70_211_GetUpgradeFeeValidateErrorForMissingChannel", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc70_211_GetUpgradeFeeValidateErrorForMissingChannel", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc70_211_GetUpgradeFeeValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc70_211_GetUpgradeFeeValidateErrorForMissingChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");



			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=71,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc71_211_GetUpgradeFeeValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc71_211_GetUpgradeFeeValidateErrorForMissingBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc71_211_GetUpgradeFeeValidateErrorForMissingBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc71_211_GetUpgradeFeeValidateErrorForMissingBrand", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc71_211_GetUpgradeFeeValidateErrorForMissingBrand", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc71_211_GetUpgradeFeeValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc71_211_GetUpgradeFeeValidateErrorForMissingBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");



			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	@Test(enabled=runTestCase,priority=72,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc72_211_GetUpgradeFeeValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc72_211_GetUpgradeFeeValidateErrorForMsisdnformat", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc72_211_GetUpgradeFeeValidateErrorForMsisdnformat", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc72_211_GetUpgradeFeeValidateErrorForMsisdnformat", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc72_211_GetUpgradeFeeValidateErrorForMsisdnformat", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc72_211_GetUpgradeFeeValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc72_211_GetUpgradeFeeValidateErrorForMsisdnformat", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=73,description="This testcase will validate the error code 100 for invalid msisdn")

	public static void tc73_211_GetUpgradeFeeValidateErrorForInvalidMsisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc73_211_GetUpgradeFeeValidateErrorForInvalidMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc73_211_GetUpgradeFeeValidateErrorForInvalidMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc73_211_GetUpgradeFeeValidateErrorForInvalidMsisdn", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc73_211_GetUpgradeFeeValidateErrorForInvalidMsisdn", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc73_211_GetUpgradeFeeValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc73_211_GetUpgradeFeeValidateErrorForInvalidMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=74,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc74_211_GetUpgradeFeeValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc74_211_GetUpgradeFeeValidateErrorForInvalidChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc74_211_GetUpgradeFeeValidateErrorForInvalidChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc74_211_GetUpgradeFeeValidateErrorForInvalidChannel", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc74_211_GetUpgradeFeeValidateErrorForInvalidChannel", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc74_211_GetUpgradeFeeValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc74_211_GetUpgradeFeeValidateErrorForInvalidChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=75,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc75_211_GetUpgradeFeeValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc75_211_GetUpgradeFeeValidateErrorForInvalidBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc75_211_GetUpgradeFeeValidateErrorForInvalidBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc75_211_GetUpgradeFeeValidateErrorForInvalidBrand", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc75_211_GetUpgradeFeeValidateErrorForInvalidBrand", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc75_211_GetUpgradeFeeValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc75_211_GetUpgradeFeeValidateErrorForInvalidBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=76,description="This testcase will validate the error code 102 for PayG customers")

	public static void tc76_211_GetUpgradeFeeValidateErrorForPayGMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc76_211_GetUpgradeFeeValidateErrorForPayGMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc76_211_GetUpgradeFeeValidateErrorForPayGMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc76_211_GetUpgradeFeeValidateErrorForPayGMsisdn", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc76_211_GetUpgradeFeeValidateErrorForPayGMsisdn", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc76_211_GetUpgradeFeeValidateErrorForPayGMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc76_211_GetUpgradeFeeValidateErrorForPayGMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=77,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

	public static void tc77_211_GetUpgradeFeeValidateErrorForHomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc77_211_GetUpgradeFeeValidateErrorForHomeMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc77_211_GetUpgradeFeeValidateErrorForHomeMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc77_211_GetUpgradeFeeValidateErrorForHomeMsisdn", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc77_211_GetUpgradeFeeValidateErrorForHomeMsisdn", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc77_211_GetUpgradeFeeValidateErrorForHomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc77_211_GetUpgradeFeeValidateErrorForHomeMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=78,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc78_211_GetUpgradeFeeValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc78_211_GetUpgradeFeeValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc78_211_GetUpgradeFeeValidateErrorWhenAllParametesBlank", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc78_211_GetUpgradeFeeValidateErrorWhenAllParametesBlank", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc78_211_GetUpgradeFeeValidateErrorWhenAllParametesBlank", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc78_211_GetUpgradeFeeValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc78_211_GetUpgradeFeeValidateErrorWhenAllParametesBlank", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=79,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc79_211_GetUpgradeFeeValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc79_211_GetUpgradeFeeValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc79_211_GetUpgradeFeeValidateErrorWhenAllParametesInvalid", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc79_211_GetUpgradeFeeValidateErrorWhenAllParametesInvalid", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc79_211_GetUpgradeFeeValidateErrorWhenAllParametesInvalid", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc79_211_GetUpgradeFeeValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc79_211_GetUpgradeFeeValidateErrorWhenAllParametesInvalid", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=80,description="This testcase will validate the error code 23 for missing upgrade type")

	public static void tc80_211_GetUpgradeFeeValidateErrorForMissingUpgradeType() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing upgrade type");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing upgrade type");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetUpgradeFee";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc80_211_GetUpgradeFeeValidateErrorForMissingUpgradeType", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc80_211_GetUpgradeFeeValidateErrorForMissingUpgradeType", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc80_211_GetUpgradeFeeValidateErrorForMissingUpgradeType", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc80_211_GetUpgradeFeeValidateErrorForMissingUpgradeType", "upgradeType");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc80_211_GetUpgradeFeeValidateErrorForMissingUpgradeType", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc80_211_GetUpgradeFeeValidateErrorForMissingUpgradeType", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.getUpgradeFee(msisdn,channel,brand,upgradeType);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/upgradefee");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	//                GetTradeInValue                         //

	@Test(enabled=runTestCase,priority=81,description="This testcase will validate GetTradeInValue request")

	public static void tc81_211_getTradeInValueValidateResponse() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit GetTradeInValue request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit GetTradeInValue request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "damagetoportsorButton");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc81_211_getTradeInValueValidateResponse", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=82,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc82_211_getTradeInValueValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=83,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc83_211_getTradeInValueValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc83_211_getTradeInValueValidateErrorForMissingChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");



			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=84,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc84_211_getTradeInValueValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc84_211_getTradeInValueValidateErrorForMissingBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");



			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	@Test(enabled=runTestCase,priority=85,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc85_211_getTradeInValueValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc85_211_getTradeInValueValidateErrorForMsisdnformat", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=86,description="This testcase will validate the error code 100 for invalid msisdn")

	public static void tc86_211_getTradeInValueValidateErrorForInvalidMsisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc86_211_getTradeInValueValidateErrorForInvalidMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=87,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc87_211_getTradeInValueValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc87_211_getTradeInValueValidateErrorForInvalidChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=88,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc88_211_getTradeInValueValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc88_211_getTradeInValueValidateErrorForInvalidBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=89,description="This testcase will validate the error code 102 for PayG customers")

	public static void tc89_211_getTradeInValueValidateErrorForPayGMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc89_211_getTradeInValueValidateErrorForPayGMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=90,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

	public static void tc90_211_getTradeInValueValidateErrorForHomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc90_211_getTradeInValueValidateErrorForHomeMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=91,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc91_211_getTradeInValueValidateErrorWhenAllParametesBlank", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=92,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="GetTradeInValue";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "brand");

			String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "upgradeType");

			String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "imei");

			String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "make");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "model");

			String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "memoryVariant");

			String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "deviceswitchOn");

			String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "damagetoCasing");

			String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "damagetoDisplay");

			String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "damagetoportsorButton");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc92_211_getTradeInValueValidateErrorWhenAllParametesInvalid", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

					model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            

	/*

              @Test(enabled=runTestCase,priority=93,description="This testcase will validate the error code 23 for missing upgrade type")

              public static void tc93_211_getTradeInValueValidateErrorForMissingUpgradeType() {



                             flag=0;

                             nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

              timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

                             String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

                             System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

                             System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

                             //String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

                             String fileName=nameOfTestMethode;

                             try {

                                           test=reportDirectory.report.startTest("");

                                           reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing upgrade type");

                                           reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing upgrade type");

                                           String excelName="gwsRestAssuredRequestParameters";

                                           String sheetName="GetTradeInValue";



                                           //fetching the request data from excel//

                                           String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "msisdn");

                                           String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "channel");

                                           String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "brand");

                                           String upgradeType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "upgradeType");

                                           String imei=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "imei");

                                           String make=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "make");

                                           String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "model");

                                           String memoryVariant=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "memoryVariant");

                                           String deviceswitchOn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "deviceswitchOn");

                                           String damagetoCasing=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "damagetoCasing");

                                           String damagetoDisplay=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "damagetoDisplay");

                                           String damagetoportsorButton=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc82_211_getTradeInValueValidateErrorForMissingMsisdn", "damagetoportsorButton");

                                           String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "ErrorCode");

                                           String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc93_211_getTradeInValueValidateErrorForMissingUpgradeType", "ErrorMessage");

                                           //Request parametes are formed using Map//

                                           HashMap<String,Object> requestMap=eeRestAssured.getTradeInValue(msisdn,channel,brand,imei,make,

                                                          model,memoryVariant,deviceswitchOn,damagetoCasing,damagetoDisplay,damagetoportsorButton);

                                           //Converting request map into jason formate//

                                           String jason=eeRestAssured.convertMapToJsonObject(requestMap);

                                           //save json request to json file

                             genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

                                           //fetch response//

                                           Response rr=eeRestAssured.getRestResponseObj(requestMap,"/tradeinValues");

                                           //Validate status code//

                                           int statusCode = rr.getStatusCode();

                                           System.out.println("statusCode="+statusCode);

                                           if(statusCode>200) {

                                                          System.out.println("statusCode validation Passed");

                                                          reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

                                           }else {

                                                          System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

                                                          reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

                                           }

                                           //copy Response generated to file//

                             genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



                                           //Parsing json to perform required validations//

                                           String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

                                           String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

                                           if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

                                                          System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

                                                         reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

                                           }else {

                                                          System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

                                                         reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                                         reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

                                                                                      "<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

                                           }

                                           flag++;

                                           reportDirectory.report.endTest(test);

                             reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



                             }catch (Exception e) {

                                           System.out.println("Catch block executed method");

                                           AssertJUnit.assertEquals(flag, 1);

                                           e.printStackTrace();

                             }

              }

	 */

	//                upgradeAddlineRecommendation                     //



	@Test(enabled=runTestCase,priority=94,description="This testcase will validate GetTradeInValue request")

	public static void tc94_211_upgradeAddLineRecommendationsValidateResponse() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit upgradeAddLineRecommendations request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit upgradeAddLineRecommendations request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "rule1");

			/*          String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "rule2");

                                           String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "rule3");

                                           String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "rule4");

			 */

			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc94_211_upgradeAddLineRecommendationsValidateResponse", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=95,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=96,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc96_211_upgradeAddLineRecommendationsValidateErrorForMissingChannel", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");



			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=97,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc97_211_upgradeAddLineRecommendationsValidateErrorForMissingBrand", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");



			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	@Test(enabled=runTestCase,priority=98,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc98_211_upgradeAddLineRecommendationsValidateErrorForMsisdnformat", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=99,description="This testcase will validate the error code 100 for invalid msisdn")

	public static void tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc99_211_upgradeAddLineRecommendationsValidateErrorForInvalidMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=100,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc100_211_upgradeAddLineRecommendationsValidateErrorForInvalidChannel", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=101,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc101_211_upgradeAddLineRecommendationsValidateErrorForInvalidBrand", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=102,description="This testcase will validate the error code 102 for PayG customers")

	public static void tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc102_211_upgradeAddLineRecommendationsValidateErrorForPayGMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=103,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

	public static void tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc103_211_upgradeAddLineRecommendationsValidateErrorForHomeMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=104,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc104_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=105,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc105_211_upgradeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=106,description="This testcase will validate the error code 23 for missing Journey type")

	public static void tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing journey type");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing journey type");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc106_211_upgradeAddLineRecommendationsValidateErrorForMissingJourneyType", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=107,description="This testcase will validate the error code 23 for missing SelectedArticleIde")

	public static void tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing SelectedArticleId");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing SelectedArticleId");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc107_211_upgradeAddLineRecommendationsValidateErrorForMissingSelectedArticleId", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=108,description="This testcase will validate the error code 23 for missing SourceTransactionID")

	public static void tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing SourceTransactionID");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing SourceTransactionID");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc108_211_upgradeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=109,description="This testcase will validate the error code 24 for invalid InvalidMaxRelatedNextBestActions")

	public static void tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid InvalidMaxRelatedNextBestAction");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid InvalidMaxRelatedNextBestAction");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc109_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=110,description="This testcase will validate the error code 24 for invalid MaxNextBestActions")

	public static void tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid MaxNextBestAction");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid MaxNextBestAction");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc110_211_upgradeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=111,description="This testcase will validate the error code 24 for Duplicate Product Categories")

	public static void tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for Duplicate Product Categorie");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for Duplicate Product Categories");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc111_211_upgradeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=112,description="This testcase will validate the error code 24 for invalid product categories")

	public static void tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid product categories");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid product categories");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc112_211_upgradeAddLineRecommendationsValidateErrorForInvalidProductCategories", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=113,description="This testcase will validate the error code 24 for invalid rules")

	public static void tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid rulese");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid rules");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc113_211_upgradeAddLineRecommendationsValidateErrorForInvalidRules", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=114,description="This testcase will validate the error code 24 for dulicate rules")

	public static void tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for dulicate rules");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for dulicate rules");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc114_211_upgradeAddLineRecommendationsValidateErrorForDuplicateRules", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=115,description="This testcase will validate the error code 24 for invalid Journey type")

	public static void tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid Journey type");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid Journey type");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc115_211_upgradeAddLineRecommendationsValidateErrorForInvalidJourneyType", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=116,description="This testcase will validate the error code 101 No offers for customes")

	public static void tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 101 No offers for customes");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 101 No offers for customes");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="upgradeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "journeyType");

			int remainingMRC=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "remainingMRC"));

			String manufacturer=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "manufacturer");

			String model=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "model");

			String selectedArticleId=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "selectedArticleId");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc116_211_upgradeAddLineRecommendationsValidateResponseWhenNoOffersForCustomes", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.upgradeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,remainingMRC, manufacturer, model, selectedArticleId, category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	//                inlifeAddlineRecommendation                     //



	@Test(enabled=runTestCase,priority=117,description="This testcase will validate inlifeAddline request")

	public static void tc117_S211_inlifeAddLineRecommendationsValidateResponse() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();             

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit upgradeAddLineRecommendations request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit upgradeAddLineRecommendations request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "rule4");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc117_S211_inlifeAddLineRecommendationsValidateResponse", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=118,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc118_S211_inlifeAddLineRecommendationsValidateErrorForMissingMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=119,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc95_211_upgradeAddLineRecommendationsValidateErrorForMissingMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc119_S211_inlifeAddLineRecommendationsValidateErrorForMissingChannel", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");



			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=120,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc120_S211_inlifeAddLineRecommendationsValidateErrorForMissingBrand", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");



			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	@Test(enabled=runTestCase,priority=121,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc121_S211_inlifeAddLineRecommendationsValidateErrorForMsisdnformat", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=122,description="This testcase will validate the error code 100 for invalid msisdn")

	public static void tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc122_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=123,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc123_S211_inlifeAddLineRecommendationsValidateErrorForInvalidChannel", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=124,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc124_S211_inlifeAddLineRecommendationsValidateErrorForInvalidBrand", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=125,description="This testcase will validate the error code 102 for PayG customers")

	public static void tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc125_S211_inlifeAddLineRecommendationsValidateErrorForPayGMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=126,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

	public static void tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc126_S211_inlifeAddLineRecommendationsValidateErrorForHomeMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=127,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc127_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesBlank", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=128,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc128_S211_inlifeAddLineRecommendationsValidateErrorWhenAllParametesInvalid", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=runTestCase,priority=129,description="This testcase will validate the error code 23 for missing Journey type")

	public static void tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing journey type");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing journey type");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc129_S211_inlifeAddLineRecommendationsValidateErrorForMissingJourneyType", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=130,description="This testcase will validate the error code 23 for missing SourceTransactionID")

	public static void tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing SourceTransactionID");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing SourceTransactionID");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc130_S211_inlifeAddLineRecommendationsValidateErrorForMissingSourceTransactionID", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=131,description="This testcase will validate the error code 24 for invalid InvalidMaxRelatedNextBestActions")

	public static void tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid InvalidMaxRelatedNextBestAction");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid InvalidMaxRelatedNextBestAction");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc131_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxRelatedNextBestActions", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=132,description="This testcase will validate the error code 24 for invalid MaxNextBestActions")

	public static void tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid MaxNextBestAction");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid MaxNextBestAction");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc132_S211_inlifeAddLineRecommendationsValidateErrorForInvalidMaxNextBestActions", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=133,description="This testcase will validate the error code 24 for Duplicate Product Categories")

	public static void tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for Duplicate Product Categorie");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for Duplicate Product Categories");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc133_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateProductCategories", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=134,description="This testcase will validate the error code 24 for invalid product categories")

	public static void tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid product categories");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid product categories");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc134_S211_inlifeAddLineRecommendationsValidateErrorForInvalidProductCategories", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=135,description="This testcase will validate the error code 24 for invalid rules")

	public static void tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid rulese");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid rules");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc135_S211_inlifeAddLineRecommendationsValidateErrorForInvalidRules", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=136,description="This testcase will validate the error code 24 for dulicate rules")

	public static void tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for dulicate rules");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for dulicate rules");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc136_S211_inlifeAddLineRecommendationsValidateErrorForDuplicateRules", "ErrorMessage");



			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=runTestCase,priority=137,description="This testcase will validate the error code 24 for invalid Journey type")

	public static void tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid Journey type");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid Journey type");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inlifeAddLineRecommendations";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "brand");

			String sourceTransactionID=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "sourceTransactionID");

			String journeyType=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "journeyType");

			String category1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category1");

			String category2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category2");

			String category3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category3");

			String category4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category4");

			String category5=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "category5");

			int maxNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "maxNextBestActions"));

			int maxRelatedNextBestActions=Integer.parseInt(generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "maxRelatedNextBestActions"));

			String rule1=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "rule1");

			String rule2=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "rule2");

			String rule3=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "rule3");

			String rule4=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "rule4");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc137_S211_inlifeAddLineRecommendationsValidateErrorForInvalidJourneyType", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.inlifeAddLineRecommendation(msisdn,channel, brand, sourceTransactionID,

					journeyType,category1, category2,category3,

					category4,category5,maxNextBestActions, maxRelatedNextBestActions,

					rule1);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/addline");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	//         RetriveBookmarks        //

	@Test(enabled=retriveBookmarks,priority=139,description="This testcase will hit retriveBookmarks request and fetch the response")

	public static void tc139_211_RetriveBookmarks() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit GetUpgradeFee request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit GetUpgradeFee request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc139_211_RetriveBookmarks", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc139_211_RetriveBookmarks", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc139_211_RetriveBookmarks", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc139_211_RetriveBookmarks", "context");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc139_211_RetriveBookmarks", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=140,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc140_211_RetriveBookmarksValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc140_211_RetriveBookmarksValidateErrorForMissingMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc140_211_RetriveBookmarksValidateErrorForMissingMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc140_211_RetriveBookmarksValidateErrorForMissingMsisdn", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc140_211_RetriveBookmarksValidateErrorForMissingMsisdn", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc140_211_RetriveBookmarksValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc140_211_RetriveBookmarksValidateErrorForMissingMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=141,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc141_211_RetriveBookmarksValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc141_211_RetriveBookmarksValidateErrorForMissingChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc141_211_RetriveBookmarksValidateErrorForMissingChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc141_211_RetriveBookmarksValidateErrorForMissingChannel", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc141_211_RetriveBookmarksValidateErrorForMissingChannel", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc141_211_RetriveBookmarksValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc141_211_RetriveBookmarksValidateErrorForMissingChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=142,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc142_211_RetriveBookmarksValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc142_211_RetriveBookmarksValidateErrorForMissingBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc142_211_RetriveBookmarksValidateErrorForMissingBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc142_211_RetriveBookmarksValidateErrorForMissingBrand", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc142_211_RetriveBookmarksValidateErrorForMissingBrand", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc142_211_RetriveBookmarksValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc142_211_RetriveBookmarksValidateErrorForMissingBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	@Test(enabled=retriveBookmarks,priority=143,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc143_211_RetriveBookmarksValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc143_211_RetriveBookmarksValidateErrorForMsisdnformat", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc143_211_RetriveBookmarksValidateErrorForMsisdnformat", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc143_211_RetriveBookmarksValidateErrorForMsisdnformat", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc143_211_RetriveBookmarksValidateErrorForMsisdnformat", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc143_211_RetriveBookmarksValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc143_211_RetriveBookmarksValidateErrorForMsisdnformat", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=144,description="This testcase will validate the error code 100 for invalid msisdn")

	public static void tc144_211_RetriveBookmarksValidateErrorForInvalidMsisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc144_211_RetriveBookmarksValidateErrorForInvalidMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc144_211_RetriveBookmarksValidateErrorForInvalidMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc144_211_RetriveBookmarksValidateErrorForInvalidMsisdn", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc144_211_RetriveBookmarksValidateErrorForInvalidMsisdn", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc144_211_RetriveBookmarksValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc144_211_RetriveBookmarksValidateErrorForInvalidMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=145,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc145_211_RetriveBookmarksValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc145_211_RetriveBookmarksValidateErrorForInvalidChannel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc145_211_RetriveBookmarksValidateErrorForInvalidChannel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc145_211_RetriveBookmarksValidateErrorForInvalidChannel", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc145_211_RetriveBookmarksValidateErrorForInvalidChannel", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc145_211_RetriveBookmarksValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc145_211_RetriveBookmarksValidateErrorForInvalidChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=146,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc146_211_RetriveBookmarksValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc146_211_RetriveBookmarksValidateErrorForInvalidBrand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc146_211_RetriveBookmarksValidateErrorForInvalidBrand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc146_211_RetriveBookmarksValidateErrorForInvalidBrand", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc146_211_RetriveBookmarksValidateErrorForInvalidBrand", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc146_211_RetriveBookmarksValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc146_211_RetriveBookmarksValidateErrorForInvalidBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=147,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc147_211_RetriveBookmarksValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc147_211_RetriveBookmarksValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc147_211_RetriveBookmarksValidateErrorWhenAllParametesBlank", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc147_211_RetriveBookmarksValidateErrorWhenAllParametesBlank", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc147_211_RetriveBookmarksValidateErrorWhenAllParametesBlank", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc147_211_RetriveBookmarksValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc147_211_RetriveBookmarksValidateErrorWhenAllParametesBlank", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=148,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc148_211_RetriveBookmarksValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc148_211_RetriveBookmarksValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc148_211_RetriveBookmarksValidateErrorWhenAllParametesInvalid", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc148_211_RetriveBookmarksValidateErrorWhenAllParametesInvalid", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc148_211_RetriveBookmarksValidateErrorWhenAllParametesInvalid", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc148_211_RetriveBookmarksValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc148_211_RetriveBookmarksValidateErrorWhenAllParametesInvalid", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=149,description="This testcase will validate the error code 23 for missing context")

	public static void tc149_211_RetriveBookmarksValidateErrorForMissingContext() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing context");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing context");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc149_211_RetriveBookmarksValidateErrorForMissingContext", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc149_211_RetriveBookmarksValidateErrorForMissingContext", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc149_211_RetriveBookmarksValidateErrorForMissingContext", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc149_211_RetriveBookmarksValidateErrorForMissingContext", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc149_211_RetriveBookmarksValidateErrorForMissingContext", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc149_211_RetriveBookmarksValidateErrorForMissingContext", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=150,description="This testcase will validate the error code 24 for invalid context")

	public static void tc150_211_RetriveBookmarksValidateErrorForInvalidContext() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid contexts");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid context");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc150_211_RetriveBookmarksValidateErrorForInvalidContext", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc150_211_RetriveBookmarksValidateErrorForInvalidContext", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc150_211_RetriveBookmarksValidateErrorForInvalidContext", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc150_211_RetriveBookmarksValidateErrorForInvalidContext", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc150_211_RetriveBookmarksValidateErrorForInvalidContext", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc150_211_RetriveBookmarksValidateErrorForInvalidContext", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=151,description="This testcase will validate the error code 101 for no book marks")

	public static void tc151_211_RetriveBookmarksvalidateNoBookMarkAvailable() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 101 for no book marks");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 101 for no book marks");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="RetriveBookmarks";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc151_211_RetriveBookmarksvalidateNoBookMarkAvailable", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc151_211_RetriveBookmarksvalidateNoBookMarkAvailable", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc151_211_RetriveBookmarksvalidateNoBookMarkAvailable", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc151_211_RetriveBookmarksvalidateNoBookMarkAvailable", "context");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc151_211_RetriveBookmarksvalidateNoBookMarkAvailable", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc151_211_RetriveBookmarksvalidateNoBookMarkAvailable", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.retriveBookmarks(msisdn,channel,brand,context);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/bookmarks-query");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	//               StoreBookmarkItems                     //



	@Test(enabled=retriveBookmarks,priority=152,description="This testcase will validate storeBookMark request")

	public static void tc152_211_StoreBookmarkItemsValidate_Response() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();             

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit storeBookMark request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit storeBookMark request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc152_211_StoreBookmarkItemsValidate_Response", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc152_211_StoreBookmarkItemsValidate_Response", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc152_211_StoreBookmarkItemsValidate_Response", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc152_211_StoreBookmarkItemsValidate_Response", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc152_211_StoreBookmarkItemsValidate_Response", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc152_211_StoreBookmarkItemsValidate_Response", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc152_211_StoreBookmarkItemsValidate_Response", "parentCEC");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc152_211_StoreBookmarkItemsValidate_Response", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=153,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc153_211_StoreBookmarkItemsValidateErrorForMissing_Msisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=154,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc154_211_StoreBookmarkItemsValidateErrorForMissing_Channel", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=155,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc155_211_StoreBookmarkItemsValidateErrorForMissing_Brand", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	@Test(enabled=retriveBookmarks,priority=156,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc156_211_StoreBookmarkItemsValidateErrorForMsisdng_format", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=157,description="This testcase will validate the error code 100 for invalid msisdn")

	public static void tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc157_211_StoreBookmarkItemsValidateErrorForInvalid_Msisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=158,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc158_211_StoreBookmarkItemsValidateErrorForInvalid_Channel", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=159,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc159_211_StoreBookmarkItemsValidateErrorForInvalid_Brand", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=160,description="This testcase will validate the error code 102 for PayG customers")

	public static void tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc160_211_StoreBookmarkItemsValidateErrorFor_PayGMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=161,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

	public static void tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc161_211_StoreBookmarkItemsValidateErrorFor_HomeMsisdn", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=162,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc162_211_StoreBookmarkItemsValidateErrorWhen_AllParametesBlank", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=163,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc163_211_StoreBookmarkItemsValidateErrorWhen_AllParametesInvalid", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=retriveBookmarks,priority=164,description="This testcase will validate the error code 23 for missing Context")

	public static void tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing Context");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing Context");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc164_211_StoreBookmarkItemsValidateErrorForMissing_Context", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=165,description="This testcase will validate the error code 23 for missing id")

	public static void tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing id");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing id");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc165_211_StoreBookmarkItemsValidateErrorForMissing_Id", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=166,description="This testcase will validate the error code 23 for missing SavedDateTime")

	public static void tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing SavedDateTime");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing SavedDateTime");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc166_211_StoreBookmarkItemsValidateErrorForMissing_SavedDateTime", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=167,description="This testcase will validate the error code 23 for missing ParentCEC")

	public static void tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing ParentCEC");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 for missing ParentCEC");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc167_211_StoreBookmarkItemsValidateErrorForMissing_ParentCEC", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=168,description="This testcase will validate the error code 24 for invalid Context")

	public static void tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid Context");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid Context");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc168_211_StoreBookmarkItemsValidateErrorForInvalid_Context", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=169,description="This testcase will validate the error code 24 for invalid id")

	public static void tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid id");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid id");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";





			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc169_211_StoreBookmarkItemsValidateErrorForInvalid_Id", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=retriveBookmarks,priority=170,description="This testcase will validate the error code 24 for invalid SavedDateTime")

	public static void tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid SavedDateTime");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid SavedDateTime");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="StoreBookmarkItems";



			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime", "brand");

			String context=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime", "context");

			String id=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime", "id");

			String savedDateTime=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime", "savedDateTime");

			String parentCEC=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime", "parentCEC");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc170_211_StoreBookmarkItemsValidateErrorForInvalid_SavedDateTime", "ErrorMessage");



			//Request parametes are formed using Map//

			HashMap<String,Object> requestMap=eeRestAssured.storeBookmarkItemsRequest(msisdn,channel,brand,context,id,

					savedDateTime,parentCEC);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJsonObject(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponseObj(requestMap,"/bookmarks");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	//        inlifePPUpsell            //



	@Test(enabled=inlifeppUpsell,priority=71,description="This testcase will hit inlifePPUpsell request and fetch the response")

	public static void tc171_211_inLifePPUpsellValidateInteractionId() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will hit GetAvgTopUp request and fetch the <br /> response");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will hit GetAvgTopUp request and <br /> fetch the response");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc171_211_inLifePPUpsellValidateInteractionId", "msisdn");

			String channel=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc171_211_inLifePPUpsellValidateInteractionId", "channel");

			String brand=generics.excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc171_211_inLifePPUpsellValidateInteractionId", "brand");



			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>=200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" OK");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String interactionId=eeRestAssured.fetchValueFromResponse(rr,"interactionId");

			//inserting the interectionId into excel//

			excelReusablesUI.insertResponseParametes(excelName, sheetName, "tc171_211_inLifePPUpsellValidateInteractionId", "interactionId", interactionId);



			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=inlifeppUpsell,priority=72,description="This testcase will validate the error code 23 when msisdn is missing")

	public static void tc172_211_inLifePPUpsellValidateErrorForMissingMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when msisdn is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc172_211_inLifePPUpsellValidateErrorForMissingMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc172_211_inLifePPUpsellValidateErrorForMissingMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc172_211_inLifePPUpsellValidateErrorForMissingMsisdn", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc172_211_inLifePPUpsellValidateErrorForMissingMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc172_211_inLifePPUpsellValidateErrorForMissingMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=inlifeppUpsell,priority=173,description="This testcase will validate the error code 23 when channel is missing")

	public static void tc173_211_inLifePPUpsellValidateErrorForMissingChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when channel is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc173_211_inLifePPUpsellValidateErrorForMissingChannel", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc173_211_inLifePPUpsellValidateErrorForMissingChannel", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc173_211_inLifePPUpsellValidateErrorForMissingChannel", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc173_211_inLifePPUpsellValidateErrorForMissingChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc173_211_inLifePPUpsellValidateErrorForMissingChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=inlifeppUpsell,priority=174,description="This testcase will validate the error code 23 when Brand is missing")

	public static void tc174_211_inLifePPUpsellValidateErrorForMissingBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when brand is missing");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc174_211_inLifePPUpsellValidateErrorForMissingBrand", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc174_211_inLifePPUpsellValidateErrorForMissingBrand", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc174_211_inLifePPUpsellValidateErrorForMissingBrand", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc174_211_inLifePPUpsellValidateErrorForMissingBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc174_211_inLifePPUpsellValidateErrorForMissingBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}                          



	@Test(enabled=inlifeppUpsell,priority=175,description="This testcase will validate the error code 24 for msisdn format")

	public static void tc175_211_inLifePPUpsellValidateErrorForMsisdnformat() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for msisdn format");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc175_211_inLifePPUpsellValidateErrorForMsisdnformat", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc175_211_inLifePPUpsellValidateErrorForMsisdnformat", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc175_211_inLifePPUpsellValidateErrorForMsisdnformat", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc175_211_inLifePPUpsellValidateErrorForMsisdnformat", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc175_211_inLifePPUpsellValidateErrorForMsisdnformat", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=inlifeppUpsell,priority=176,description="This testcase will validate the error code 24 for invalid msisdn")

	public static void tc176_211_inLifePPUpsellValidateErrorForInvalidMsisdn() {

		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid msisdn");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid msisdn");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc176_211_inLifePPUpsellValidateErrorForInvalidMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc176_211_inLifePPUpsellValidateErrorForInvalidMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc176_211_inLifePPUpsellValidateErrorForInvalidMsisdn", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc176_211_inLifePPUpsellValidateErrorForInvalidMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc176_211_inLifePPUpsellValidateErrorForInvalidMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=inlifeppUpsell,priority=177,description="This testcase will validate the error code 24 for invalid channel")

	public static void tc177_211_inLifePPUpsellValidateErrorForInvalidChannel() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid channel");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc177_211_inLifePPUpsellValidateErrorForInvalidChannel", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc177_211_inLifePPUpsellValidateErrorForInvalidChannel", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc177_211_inLifePPUpsellValidateErrorForInvalidChannel", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc177_211_inLifePPUpsellValidateErrorForInvalidChannel", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc177_211_inLifePPUpsellValidateErrorForInvalidChannel", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=inlifeppUpsell,priority=178,description="This testcase will validate the error code 24 for invalid brand")

	public static void tc178_211_inLifePPUpsellValidateErrorForInvalidBrand() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 24 for invalid brand");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc178_211_inLifePPUpsellValidateErrorForInvalidBrand", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc178_211_inLifePPUpsellValidateErrorForInvalidBrand", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc178_211_inLifePPUpsellValidateErrorForInvalidBrand", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc178_211_inLifePPUpsellValidateErrorForInvalidBrand", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc178_211_inLifePPUpsellValidateErrorForInvalidBrand", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=inlifeppUpsell,priority=179,description="This testcase will validate the error code 102 for PayG customers")

	public static void tc179_211_inLifePPUpsellValidateErrorForPayGMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 102 for PayG customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc179_211_inLifePPUpsellValidateErrorForPayGMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc179_211_inLifePPUpsellValidateErrorForPayGMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc179_211_inLifePPUpsellValidateErrorForPayGMsisdn", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc179_211_inLifePPUpsellValidateErrorForPayGMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc179_211_inLifePPUpsellValidateErrorForPayGMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=inlifeppUpsell,priority=180,description="This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers")

	public static void tc180_211_inLifePPUpsellValidateErrorForHomeMsisdn() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code euf.error.code.EUF-ERR-5 for home customers");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc180_211_inLifePPUpsellValidateErrorForHomeMsisdn", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc180_211_inLifePPUpsellValidateErrorForHomeMsisdn", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc180_211_inLifePPUpsellValidateErrorForHomeMsisdn", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc180_211_inLifePPUpsellValidateErrorForHomeMsisdn", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc180_211_inLifePPUpsellValidateErrorForHomeMsisdn", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Okt");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Ok");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=inlifeppUpsell,priority=181,description="This testcase will validate the error code 23 when all parameters are blank in request")

	public static void tc181_211_inLifePPUpsellValidateErrorWhenAllParametesBlank() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are blank in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc181_211_inLifePPUpsellValidateErrorWhenAllParametesBlank", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc181_211_inLifePPUpsellValidateErrorWhenAllParametesBlank", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc181_211_inLifePPUpsellValidateErrorWhenAllParametesBlank", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc181_211_inLifePPUpsellValidateErrorWhenAllParametesBlank", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc181_211_inLifePPUpsellValidateErrorWhenAllParametesBlank", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=inlifeppUpsell,priority=182,description="This testcase will validate the error code 24 when all parameters are invalid in request")

	public static void tc182_211_inLifePPUpsellValidateErrorWhenAllParametesInvalid() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 23 when all parameters are invalid in request");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc182_211_inLifePPUpsellValidateErrorWhenAllParametesInvalid", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc182_211_inLifePPUpsellValidateErrorWhenAllParametesInvalid", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc182_211_inLifePPUpsellValidateErrorWhenAllParametesInvalid", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc182_211_inLifePPUpsellValidateErrorWhenAllParametesInvalid", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc182_211_inLifePPUpsellValidateErrorWhenAllParametesInvalid", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            



	@Test(enabled=inlifeppUpsell,priority=183,description="This testcase will validate the error code 101 when no offers for customer")

	public static void tc183_211_inLifePPUpsellValidateErrorWhenAWhenNoOffersForCustomer() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 when no offers for custome");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 when no offers for custome");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc183_211_inLifePPUpsellValidateErrorWhenAWhenNoOffersForCustomer", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc183_211_inLifePPUpsellValidateErrorWhenAWhenNoOffersForCustomer", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc183_211_inLifePPUpsellValidateErrorWhenAWhenNoOffersForCustomer", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc183_211_inLifePPUpsellValidateErrorWhenAWhenNoOffersForCustomer", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc183_211_inLifePPUpsellValidateErrorWhenAWhenNoOffersForCustomer", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}



	@Test(enabled=inlifeppUpsell,priority=184,description="This testcase will validate the error code 101 when no offers for customer")

	public static void tc184_211_inLifePPUpsellValidateErrorWhenPricePlanChangeInProcress() {



		flag=0;

		nameOfTestMethode=new Throwable().getStackTrace()[0].getMethodName();

		timestampOfCreatedDirectory=reportDirectory.createDirectoryCaptureReportFilesInsideDirectoryUIAutomation(nameOfTestMethode);

		String currentSystemDateTime=generics.genericKeywords.captureCurrentSystemDateTime();

		System.out.println("timestampOfCreatedDirectory "+timestampOfCreatedDirectory);

		System.out.println("reportDirectory.report_consolidated "+reportDirectory.report_consolidated);

		//String fileName=nameOfTestMethode+" "+generics.genericKeywords.captureCurrentSystemDateTime();

		String fileName=nameOfTestMethode;

		try {

			test=reportDirectory.report.startTest("");

			reportDirectory.test.log(LogStatus.INFO, "This testcase will validate the error code 100 when no offers for custome");

			reportDirectory.test_consolidated.log(LogStatus.INFO, "This testcase will validate the error code 100 when no offers for custome");

			String excelName="gwsRestAssuredRequestParameters";

			String sheetName="inLifePPUpsell";

			//fetching the request data from excel//

			String msisdn=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc184_211_inLifePPUpsellValidateErrorWhenPricePlanChangeInProcress", "msisdn");

			String channel=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc184_211_inLifePPUpsellValidateErrorWhenPricePlanChangeInProcress", "channel");

			String brand=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc184_211_inLifePPUpsellValidateErrorWhenPricePlanChangeInProcress", "brand");

			String errorCode=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc184_211_inLifePPUpsellValidateErrorWhenPricePlanChangeInProcress", "ErrorCode");

			String errorMessage=excelReusablesUI.readRestRequestParametes(excelName, sheetName, "tc184_211_inLifePPUpsellValidateErrorWhenPricePlanChangeInProcress", "ErrorMessage");

			//Request parametes are formed using Map//

			HashMap<String,String> requestMap=eeRestAssured.inLifePPUpsellRequest(msisdn,channel,brand);

			//Converting request map into jason formate//

			String jason=eeRestAssured.convertMapToJson(requestMap);

			//save json request to json file

			genericKeywords.copyDataTofile(requestFilepath,reqDirName,"req"+fileName, "json", jason);

			//fetch response//

			Response rr=eeRestAssured.getRestResponse(requestMap,"/inlife-pp-upsell");

			//Validate status code//

			int statusCode = rr.getStatusCode();

			System.out.println("statusCode="+statusCode);

			if(statusCode>200) {

				System.out.println("statusCode validation Passed");

				reportDirectory.test.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

				reportDirectory.test_consolidated.log(LogStatus.PASS, "HTTP/1.1 "+statusCode+" Bad request");

			}else {

				System.out.println("Status Code validation failed expected = 200 but Actual="+statusCode);

				reportDirectory.test.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

				reportDirectory.test_consolidated.log(LogStatus.FAIL, "HTTP/1.1 "+statusCode+" Bad Request");

			}

			//copy Response generated to file//

			genericKeywords.copyDataTofile(responseFilepath,resDirName,"response"+fileName, "json", rr.body().asString());



			//Parsing json to perform required validations//

			String errorCodeResponse=eeRestAssured.fetchValueFromResponse(rr,"code");

			String errorMessageResponse=eeRestAssured.fetchValueFromResponse(rr,"message");

			if((errorCode.equals(errorCodeResponse)) && (errorMessage.equals(errorMessageResponse))) {

				System.out.println("Error code validation passed code="+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br />message="+errorMessageResponse );

				reportDirectory.test_consolidated.log(LogStatus.PASS,"Error code validation passed code="+errorCodeResponse+"<br /> message="+errorMessageResponse);

			}else {

				System.out.println("Error code validation failed "+errorCodeResponse+" message="+errorMessageResponse);

				reportDirectory.test.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

				reportDirectory.test_consolidated.log(LogStatus.FAIL,"Error code validation failed Expected code="+errorCode+" and message="+errorMessage+

						"<br />but Actual code="+errorCodeResponse+"and message="+errorMessageResponse);

			}

			flag++;

			reportDirectory.report.endTest(test);

			reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);



		}catch (Exception e) {

			System.out.println("Catch block executed method");

			AssertJUnit.assertEquals(flag, 1);

			e.printStackTrace();

		}

	}            





	@AfterMethod

	public void tearDown(ITestResult result) throws IOException {



		reportDirectory.test.log(LogStatus.INFO, "End of Execution");

		reportDirectory.report.endTest(reportDirectory.test);   

		reportDirectory.report.flush();

		reportDirectory.test_consolidated.log(LogStatus.INFO, "End of Execution");      

		reportDirectory.report_consolidated.endTest(reportDirectory.test_consolidated);

		reportDirectory.report_consolidated.flush();

	}

}